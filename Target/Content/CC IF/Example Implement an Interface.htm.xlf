<?xml version="1.0" encoding="UTF-8"?>
<xliff
  version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-strict.xsd" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"
  MadCap:translationStatus="untranslated">
  <file
    xml:space="preserve"
    original="Example Implement an Interface.htm"
    source-language="en-us"
    MadCap:file-filter=""
    datatype="xhtml"
    target-language="af">
    <header>
      <skl><external-file
          href="Example Implement an Interface.htm.skl" /></skl>
      <phase-group>
        <phase
          phase-name="translation"
          process-name="translation" />
        <phase
          phase-name="completion"
          process-name="translation" />
        <phase
          phase-name="approval"
          process-name="review" />
        <phase
          phase-name="pretrans"
          process-name="pre-translation" />
      </phase-group>
      <count-group
        name="MadCap Statistics">
        <count
          count-type="total"
          unit="segment">95</count>
        <count
          count-type="x-subflow"
          unit="trans-unit">0</count>
      </count-group>
      <tool
        tool-id="MadCap Lingo 10.2"
        tool-name="Lingo"
        tool-version="10.2.6786.30644"
        tool-company="MadCap Software" />
    </header>
    <body><trans-unit
        id="1"
        restype="x-xml-h2"
        phase-name="pretrans"><source>Example – Implement an Interface</source><seg-source><mrk
            mtype="seg"
            mid="1">Example – Implement an Interface</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="2"
        restype="x-xml-p"
        phase-name="pretrans"><source>The following example demonstrates how to implement an interface for receiving data via a SOAP web service (with an XML file), and then the interface will process this data and write it to a comma separated text file.</source><seg-source><mrk
            mtype="seg"
            mid="1">The following example demonstrates how to implement an interface for receiving data via a SOAP web service (with an XML file), and then the interface will process this data and write it to a comma separated text file.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="3"
        restype="x-xml-p"
        phase-name="pretrans"><source><bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: You have been asked to create the code base in Microsoft Dynamics NAV to work with the general interface provided by <bpt
            id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="COSMOCONSULTZchn"&gt;</bpt>COSMO CONSULT<ept
            id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>. The transactional data structure that needs to be set is illustrated in <ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#TransDS" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 1&lt;/MadCap:xref&gt;</ph>.</source><seg-source><mrk
            mtype="seg"
            mid="1"><bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: You have been asked to create the code base in Microsoft Dynamics NAV to work with the general interface provided by <bpt
              id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="COSMOCONSULTZchn"&gt;</bpt>COSMO CONSULT<ept
              id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">The transactional data structure that needs to be set is illustrated in <ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#TransDS" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 1&lt;/MadCap:xref&gt;</ph>.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="4"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Transaction data structure</source><seg-source><mrk
            mtype="seg"
            mid="1">: Transaction data structure</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="5"
        restype="x-xml-h3"
        phase-name="pretrans"><source>Data Format</source><seg-source><mrk
            mtype="seg"
            mid="1">Data Format</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="6"
        restype="x-xml-p"
        phase-name="pretrans"><source>This section describes first how to implement a web service expecting this data structure and then write a codeunit processing the data.</source><seg-source><mrk
            mtype="seg"
            mid="1">This section describes first how to implement a web service expecting this data structure and then write a codeunit processing the data.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="7"
        restype="x-xml-p"
        phase-name="pretrans"><source>As illustrated in <ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#TransDS" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 1&lt;/MadCap:xref&gt;</ph>, there are one or more transaction records below the mandatory root node. Below each transaction record are one or more records and these contain one or more fields. This structure can be implemented with the help of an XMLport.</source><seg-source><mrk
            mtype="seg"
            mid="1">As illustrated in <ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#TransDS" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 1&lt;/MadCap:xref&gt;</ph>, there are one or more transaction records below the mandatory root node.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">Below each transaction record are one or more records and these contain one or more fields.</mrk><mrk
            mtype="protected"
            mid="4"> </mrk><mrk
            mtype="seg"
            mid="5">This structure can be implemented with the help of an XMLport.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="4"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="5"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="8"
        restype="x-xml-p"
        phase-name="pretrans"><source><bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: You create an XMLport to create the structure for the interface transactions, using the information shown in <ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#:2" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 2&lt;/MadCap:xref&gt;</ph>. You then add the global variables and set the necessary triggers.</source><seg-source><mrk
            mtype="seg"
            mid="1"><bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: You create an XMLport to create the structure for the interface transactions, using the information shown in <ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#:2" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 2&lt;/MadCap:xref&gt;</ph>.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">You then add the global variables and set the necessary triggers.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="9"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample XMLport</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample XMLport</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="10"
        restype="x-xml-p"
        phase-name="pretrans"><source>After creating the XMLport, declare a new global variable “FieldSequence”, increase the “FieldSequence” counter for each imported field before inserting the record, assign the value to the Field Sequence field and reset the counter on the on “OnAfterInitRecord” trigger of the record.</source><seg-source><mrk
            mtype="seg"
            mid="1">After creating the XMLport, declare a new global variable “FieldSequence”, increase the “FieldSequence” counter for each imported field before inserting the record, assign the value to the Field Sequence field and reset the counter on the on “OnAfterInitRecord” trigger of the record.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="11"
        restype="x-xml-p"
        phase-name="pretrans"><source>Globals:</source><seg-source><mrk
            mtype="seg"
            mid="1">Globals:</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="12"
        restype="x-xml-p"
        phase-name="pretrans"><source>: C/AL Globals for the XMLport</source><seg-source><mrk
            mtype="seg"
            mid="1">: C/AL Globals for the XMLport</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="13"
        restype="x-xml-p"
        phase-name="pretrans"><source>OnAfterInitRecord and OnBeforeInsertRecord Triggers:</source><seg-source><mrk
            mtype="seg"
            mid="1">OnAfterInitRecord and OnBeforeInsertRecord Triggers:</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="14"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample XMLport OnAfterInitRecord and OnBeforeInsertRecord Triggers</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample XMLport OnAfterInitRecord and OnBeforeInsertRecord Triggers</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="15"
        restype="x-xml-p"
        phase-name="pretrans"><source>The setup of the XMLport successfully implemented the data structure for the interface.</source><seg-source><mrk
            mtype="seg"
            mid="1">The setup of the XMLport successfully implemented the data structure for the interface.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="16"
        restype="x-xml-h3"
        phase-name="pretrans"><source>Data Transport</source><seg-source><mrk
            mtype="seg"
            mid="1">Data Transport</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="17"
        restype="x-xml-p"
        phase-name="pretrans"><source>This section describes how to implement the data transportation. For doing this, the  XMLport created in section <ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#Data" class="RelLinkPageNumber" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;"Data Format" on page 1&lt;/MadCap:xref&gt;</ph> will be extended to work on temporary records and a codeunit will be created for the web service.</source><seg-source><mrk
            mtype="seg"
            mid="1">This section describes how to implement the data transportation.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">For doing this, the XMLport created in section <ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#Data" class="RelLinkPageNumber" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;"Data Format" on page 1&lt;/MadCap:xref&gt;</ph> will be extended to work on temporary records and a codeunit will be created for the web service.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="18"
        restype="x-xml-p"
        phase-name="pretrans"><source><bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: First, you open the XMLport and add the temporary records and then you create a new codeunit for the web service.</source><seg-source><mrk
            mtype="seg"
            mid="1"><bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: First, you open the XMLport and add the temporary records and then you create a new codeunit for the web service.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="19"
        restype="x-xml-p"
        phase-name="pretrans"><source>Extend XMLport</source><seg-source><mrk
            mtype="seg"
            mid="1">Extend XMLport</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="20"
        restype="x-xml-p"
        phase-name="pretrans"><source>In the XMLport, set the Temporary properties of all table elements to YES and add a new function “GetData” with the following three var parameters as temporary records:</source><seg-source><mrk
            mtype="seg"
            mid="1">In the XMLport, set the Temporary properties of all table elements to YES and add a new function “GetData” with the following three var parameters as temporary records:</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="21"
        restype="x-xml-li"
        phase-name="pretrans"><source>Transaction</source><seg-source><mrk
            mtype="seg"
            mid="1">Transaction</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="22"
        restype="x-xml-li"
        phase-name="pretrans"><source>Interface Record</source><seg-source><mrk
            mtype="seg"
            mid="1">Interface Record</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="23"
        restype="x-xml-li"
        phase-name="pretrans"><source>Interface Field</source><seg-source><mrk
            mtype="seg"
            mid="1">Interface Field</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="24"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample XMLport GetData Locals</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample XMLport GetData Locals</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="25"
        restype="x-xml-p"
        phase-name="pretrans"><source>In the next step, assign the  XMLport imported records to the temporary records.</source><seg-source><mrk
            mtype="seg"
            mid="1">In the next step, assign the XMLport imported records to the temporary records.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="26"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample XMLport GetData code</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample XMLport GetData code</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="27"
        restype="x-xml-p"
        phase-name="pretrans"><source>Create Processing Codeunit</source><seg-source><mrk
            mtype="seg"
            mid="1">Create Processing Codeunit</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="28"
        restype="x-xml-p"
        phase-name="pretrans"><source>In this step, the processing codeunit will be implemented and published as a web service.</source><seg-source><mrk
            mtype="seg"
            mid="1">In this step, the processing codeunit will be implemented and published as a web service.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="29"
        restype="x-xml-p"
        phase-name="pretrans"><source>First, create a new codeunit and save it with the name “Interface Sample”. In the codeunit, create a new public function “TransferData”. Next, use the code shown in <ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#:3" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 7&lt;/MadCap:xref&gt;</ph> to define the currently implemented XMLport as var parameter for this function. As a return value, the function will return the Transaction ID as integer.</source><seg-source><mrk
            mtype="seg"
            mid="1">First, create a new codeunit and save it with the name “Interface Sample”.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">In the codeunit, create a new public function “TransferData”.</mrk><mrk
            mtype="protected"
            mid="4"> </mrk><mrk
            mtype="seg"
            mid="5">Next, use the code shown in <ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#:3" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 7&lt;/MadCap:xref&gt;</ph> to define the currently implemented XMLport as var parameter for this function.</mrk><mrk
            mtype="protected"
            mid="6"> </mrk><mrk
            mtype="seg"
            mid="7">As a return value, the function will return the Transaction ID as integer.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="4"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="5"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="6"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="7"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="30"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="31"
        restype="x-xml-p"
        phase-name="pretrans"><source>Set up Web Service in Microsoft Dynamics NAV</source><seg-source><mrk
            mtype="seg"
            mid="1">Set up Web Service in Microsoft Dynamics NAV</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="32"
        restype="x-xml-p"
        phase-name="pretrans"><source>For registering the codeunit as web service, open the <bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Web Services<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept> page in Microsoft Dynamics NAV and create a new line with the codeunit.</source><seg-source><mrk
            mtype="seg"
            mid="1">For registering the codeunit as web service, open the <bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Web Services<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept> page in Microsoft Dynamics NAV and create a new line with the codeunit.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="33"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit published as Web Service</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit published as Web Service</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="34"
        restype="x-xml-p"
        phase-name="pretrans"><source>Now an external application can write into the interface or request data.</source><seg-source><mrk
            mtype="seg"
            mid="1">Now an external application can write into the interface or request data.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="35"
        restype="x-xml-h3"
        phase-name="pretrans"><source>Processing</source><seg-source><mrk
            mtype="seg"
            mid="1">Processing</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="36"
        restype="x-xml-p"
        phase-name="pretrans"><source>In the next step, a codeunit for processing the data is implemented and set up is completed in Microsoft Dynamics NAV for the file to be properly generated.</source><seg-source><mrk
            mtype="seg"
            mid="1">In the next step, a codeunit for processing the data is implemented and set up is completed in Microsoft Dynamics NAV for the file to be properly generated.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="37"
        restype="x-xml-p"
        phase-name="pretrans"><source><bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: The web shop system needs all items from Microsoft Dynamics NAV. You need to create the codeunit that will be the processing codeunit for the interface function.</source><seg-source><mrk
            mtype="seg"
            mid="1"><bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: The web shop system needs all items from Microsoft Dynamics NAV.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">You need to create the codeunit that will be the processing codeunit for the interface function.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="38"
        restype="x-xml-p"
        phase-name="pretrans"><source>Create Codeunit to Get Items</source><seg-source><mrk
            mtype="seg"
            mid="1">Create Codeunit to Get Items</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="39"
        restype="x-xml-p"
        phase-name="pretrans"><source>Create a new codeunit and save it with the name “Get Items”. In the new codeunit, open the properties and add the  “Interface Record” table in the “TableNo” property.</source><seg-source><mrk
            mtype="seg"
            mid="1">Create a new codeunit and save it with the name “Get Items”.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">In the new codeunit, open the properties and add the “Interface Record” table in the “TableNo” property.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="40"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit – Properties</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit – Properties</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="41"
        restype="x-xml-p"
        phase-name="pretrans"><source>Now, define a new function “GetItems” and then define the “Interface Record” table as a new parameter.</source><seg-source><mrk
            mtype="seg"
            mid="1">Now, define a new function “GetItems” and then define the “Interface Record” table as a new parameter.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="42"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit – Function Parameters</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit – Function Parameters</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="43"
        restype="x-xml-p"
        phase-name="pretrans"><source>Next, create the new local variables as shown in <ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#SC Fun Var" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 11&lt;/MadCap:xref&gt;</ph>.</source><seg-source><mrk
            mtype="seg"
            mid="1">Next, create the new local variables as shown in <ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;MadCap:xref href="#SC Fun Var" class="Figure" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"&gt;Fig. 11&lt;/MadCap:xref&gt;</ph>.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="44"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit – Function Variables</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit – Function Variables</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="45"
        restype="x-xml-p"
        phase-name="pretrans"><source>Enter Code to Implement Functionality</source><seg-source><mrk
            mtype="seg"
            mid="1">Enter Code to Implement Functionality</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="46"
        restype="x-xml-p"
        phase-name="pretrans"><source>In this function, the first step is to fill the interface buffer with the requested item data. Then the interface needs to write the data into the database and attach the currently written data to the transaction entry created by the current data request.</source><seg-source><mrk
            mtype="seg"
            mid="1">In this function, the first step is to fill the interface buffer with the requested item data.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">Then the interface needs to write the data into the database and attach the currently written data to the transaction entry created by the current data request.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="47"
        restype="x-xml-p"
        phase-name="pretrans"><source>First, using the “WITH” command, tell the codeunit to use the Item table as default scope and loop over all items in the Item table.</source><seg-source><mrk
            mtype="seg"
            mid="1">First, using the “WITH” command, tell the codeunit to use the Item table as default scope and loop over all items in the Item table.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="48"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit – Function Scope and Loop</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit – Function Scope and Loop</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="49"
        restype="x-xml-p"
        phase-name="pretrans"><source>Next, clear the Interface Buffer, create a new record within the buffer and add the <bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>No.<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept> and <bpt
            id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Description<ept
            id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept> fields from the item.</source><seg-source><mrk
            mtype="seg"
            mid="1">Next, clear the Interface Buffer, create a new record within the buffer and add the <bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>No.<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept></mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">and <bpt
              id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Description<ept
              id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept> fields from the item.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="50"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit – Function Fill Buffer</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit – Function Fill Buffer</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="51"
        restype="x-xml-p"
        phase-name="pretrans"><source>Now, write the newly created content of the buffer into the database. This automatically creates a new transaction entry.</source><seg-source><mrk
            mtype="seg"
            mid="1">Now, write the newly created content of the buffer into the database.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">This automatically creates a new transaction entry.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="52"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit – Function Transfer Database</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit – Function Transfer Database</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="53"
        restype="x-xml-p"
        phase-name="pretrans"><source>Finally, add an endpoint/filename to the transaction.</source><seg-source><mrk
            mtype="seg"
            mid="1">Finally, add an endpoint/filename to the transaction.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="54"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Sample Codeunit – Write to File</source><seg-source><mrk
            mtype="seg"
            mid="1">: Sample Codeunit – Write to File</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="55"
        restype="x-xml-h4"
        phase-name="pretrans"><source>Interface Setup in Microsoft Dynamics NAV</source><seg-source><mrk
            mtype="seg"
            mid="1">Interface Setup in Microsoft Dynamics NAV</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="56"
        restype="x-xml-p"
        phase-name="pretrans"><source>Before the external component can send data via the web service, a project and project function must be set up in Microsoft Dynamics NAV.</source><seg-source><mrk
            mtype="seg"
            mid="1">Before the external component can send data via the web service, a project and project function must be set up in Microsoft Dynamics NAV.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="57"
        restype="x-xml-p"
        phase-name="pretrans"><source><bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: You create a new project and related project function in Microsoft Dynamics NAV to set up the interface.</source><seg-source><mrk
            mtype="seg"
            mid="1"><bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: You create a new project and related project function in Microsoft Dynamics NAV to set up the interface.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="58"
        restype="x-xml-p"
        phase-name="pretrans"><source>Create a new project named “Interface Sample”. Click <bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Functions<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept> and create a new project function line as follows:</source><seg-source><mrk
            mtype="seg"
            mid="1">Create a new project named “Interface Sample”.</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">Click <bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Functions<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept> and create a new project function line as follows:</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="59"
        restype="x-xml-li"
        phase-name="pretrans"><source>Code: Get Items</source><seg-source><mrk
            mtype="seg"
            mid="1">Code: Get Items</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="60"
        restype="x-xml-li"
        phase-name="pretrans"><source>Processing Codeunit: [Number of the “GetItems” codeunit created previously]</source><seg-source><mrk
            mtype="seg"
            mid="1">Processing Codeunit: [Number of the “GetItems” codeunit created previously]</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="61"
        restype="x-xml-li"
        phase-name="pretrans"><source>Data Format Code: TAB</source><seg-source><mrk
            mtype="seg"
            mid="1">Data Format Code: TAB</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="62"
        restype="x-xml-li"
        phase-name="pretrans"><source>Endpoint / Filename: Item.txt</source><seg-source><mrk
            mtype="seg"
            mid="1">Endpoint / Filename: Item.txt</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="63"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Project and Project Function setup in Microsoft Dynamics NAV</source><seg-source><mrk
            mtype="seg"
            mid="1">: Project and Project Function setup in Microsoft Dynamics NAV</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="64"
        restype="x-xml-h4"
        phase-name="pretrans"><source>Interface Processing Test</source><seg-source><mrk
            mtype="seg"
            mid="1">Interface Processing Test</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="65"
        restype="x-xml-p"
        phase-name="pretrans"><source><bpt
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: To test the interface implementation, you trigger the web service to create the file of all items in Microsoft Dynamics NAV.</source><seg-source><mrk
            mtype="seg"
            mid="1"><bpt
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;span class="Bold"&gt;</bpt>Scenario<ept
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">&lt;/span&gt;</ept>: To test the interface implementation, you trigger the web service to create the file of all items in Microsoft Dynamics NAV.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="66"
        restype="x-xml-p"
        phase-name="pretrans"><source>When the web service application requests all items from Microsoft Dynamics NAV, the system will automatically write the data to the file "C:\Temp\Item.txt".</source><seg-source><mrk
            mtype="seg"
            mid="1">When the web service application requests all items from Microsoft Dynamics NAV, the system will automatically write the data to the file "C:\Temp\Item.txt".</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="67"
        restype="x-xml-p"
        phase-name="pretrans"><source>: Text file created via the web service</source><seg-source><mrk
            mtype="seg"
            mid="1">: Text file created via the web service</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit></body>
  </file>
</xliff>